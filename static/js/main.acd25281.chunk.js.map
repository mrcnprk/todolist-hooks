{"version":3,"sources":["TasksList.js","AddTask.js","RecentlyDone.js","Header.js","Footer.js","prompt.js","App.js","reportWebVitals.js","index.js"],"names":["TasksList","tasks","React","useContext","TasksContext","dispatch","DispatchContext","language","LanguageContext","showPrompt","PromptContext","messages","list","map","task","complete","className","priority","taskName","additionalInfo","deadline","title","onClick","id","type","payload","AddTask","nameInputRef","RefContext","initialDate","Date","toISOString","slice","useState","setTaskName","date","setDate","setAdditionalInfo","setPriority","handleAddTask","e","preventDefault","length","filter","toLowerCase","name","onSubmit","value","ref","onChange","target","checked","prev","RecentlyDone","doneList","completeDate","Header","changeLanguage","ChangeLanguageContext","focus","FocusContext","Footer","countDone","polishInfo","englishInfo","Prompt","props","handleConfirm","message","handleDecline","createContext","App","useReducer","action","now","toLocaleString","setLanguage","initialPromptMessage","useMemo","text","promptText","setPromptText","isPromptActive","setIsPromptActive","promptRef","useRef","promptIndex","setPromptIndex","useCallback","autoclose","removeFunction","clearTimeout","current","classList","add","setTimeout","remove","hadleChangeLanguage","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acd25281.chunk.js","sourcesContent":["import React from 'react';\r\nimport { TasksContext, DispatchContext, LanguageContext, PromptContext } from './App.js'\r\n\r\nconst TasksList = () => {\r\n\r\n    const tasks = React.useContext(TasksContext)\r\n    const dispatch = React.useContext(DispatchContext)\r\n    const language = React.useContext(LanguageContext)\r\n    const showPrompt = React.useContext(PromptContext)\r\n\r\n\r\n    const messages = {\r\n        taskDeadlinePl: 'Termin wykonania:',\r\n        taskDeadlineEn: 'Deadline:',\r\n        confirmBtnTitlePl: 'Potwierdź wykonanie',\r\n        confirmBtnTitleEn: 'Mark as done',\r\n        deleteBtnTitlePL: 'Usuń zadanie bez potwierdzania',\r\n        deleteBtnTitleEn: 'Delete task without confirming',\r\n        deletePromptPl: 'Czy na pewno chcesz usunąć to zadanie?',\r\n        deletePromptEn: 'Are you sure you want to delete this task?'\r\n    }\r\n\r\n\r\n    const handleComplete = (id) => {\r\n        dispatch({type: 'change-status', payload: id})\r\n    }\r\n\r\n    const handleDelete = (id) => {\r\n        if (language === 'polish') return showPrompt(messages.deletePromptPl, false, () => dispatch({type: 'delete-task', payload: id}))\r\n        if (language === 'english') return showPrompt(messages.deletePromptEn, false, () => dispatch({type: 'delete-task', payload: id}))\r\n    }\r\n\r\n    const list = tasks.map(task => {\r\n    return !task.complete ? (<div className={task.priority ? 'singleTaskBox-inList priority' : 'singleTaskBox-inList'} key={task.id}>\r\n        <h4 className='taskName-inList'>{task.taskName}</h4>\r\n        <p className='taskAdditionalInfo-inList'>{task.additionalInfo}</p>\r\n        <p className='taskDeadline-inList'>{language === 'polish' ? messages.taskDeadlinePl : messages.taskDeadlineEn } {task.deadline}</p>\r\n        <button className='confirmButton-inList' title={language === 'polish' ? messages.confirmBtnTitlePl : messages.confirmBtnTitleEn} onClick={() => {handleComplete(task.id)}}><i className='fas fa-check'></i></button>\r\n        <button className='deleteButton-inList' title={language === 'polish' ? messages.deleteBtnTitlePL : messages.deleteBtnTitleEn} onClick={() => {handleDelete(task.id)}}><i className='fas fa-times'></i></button>\r\n        </div>) : null })\r\n\r\n    return (\r\n        <>\r\n        {list}\r\n        </>\r\n     );\r\n}\r\n\r\nexport default TasksList;","import React from 'react';\r\nimport {DispatchContext, LanguageContext, TasksContext, RefContext, PromptContext } from './App.js';\r\n\r\nconst AddTask = () => {\r\n\r\n    const dispatch = React.useContext(DispatchContext)\r\n    const tasks = React.useContext(TasksContext)\r\n    const language = React.useContext(LanguageContext)\r\n    const nameInputRef = React.useContext(RefContext)\r\n    const showPrompt = React.useContext(PromptContext)\r\n\r\n    const initialDate = new Date().toISOString().slice(0, 10)\r\n\r\n    const [taskName, setTaskName] = React.useState('')\r\n    const [date, setDate] = React.useState(initialDate)\r\n    const [additionalInfo, setAdditionalInfo] = React.useState('')\r\n    const [priority, setPriority] = React.useState(false)\r\n\r\n    const messages = {\r\n        emptyTaskPl: 'Nie możesz dodać pustej pozycji',\r\n        emptyTaskEn: 'You cannot add empty task',\r\n        duplicateTaskPL: 'Ta pozycja już jest na liście',\r\n        duplicateTaskEn: 'You cannot add the same task again',\r\n        addTaskLabelPl: 'Dodaj zadanie:',\r\n        addTaskLabelEn: 'Add Task:',\r\n        taskNameLabelPl: 'Nazwa zadania:',\r\n        taskNameLabelEn: 'Task name:',\r\n        additionalInfoLabelPl : 'Dodatkowe informacje:',\r\n        additionalInfoLabelEn : 'Additional information:',\r\n        taskDateLabelPl: 'Termin wykonania zadania:',\r\n        taskDateLabelEn: 'Task deadline:',\r\n        taskPriorityLabelPl: 'Ważne',\r\n        taskPriorityLabelEn: 'Urgent',\r\n        addTaskBtnLabelPl: 'Dodaj',\r\n        addTaskBtnLabelEn: 'Add',\r\n    }\r\n\r\n    const handleAddTask = (e) => {\r\n        e.preventDefault()\r\n        if (taskName.length === 0 && language === 'polish') {\r\n            return showPrompt(messages.emptyTaskPl, true)\r\n        }\r\n        else if (taskName.length === 0 && language === 'english'){\r\n            return showPrompt(messages.emptyTaskEn, true)\r\n        }\r\n        if (tasks.filter(task => task.taskName.toLowerCase() === taskName.toLowerCase()).length > 0) {\r\n            if(language === 'polish')\r\n            return showPrompt(messages.duplicateTaskPL, true)\r\n            if(language === 'english')\r\n            return showPrompt(messages.duplicateTaskEn, true)\r\n        }\r\n        dispatch({type: 'add-task', payload: {name: taskName, date: date, additionalInfo: additionalInfo, priority: priority}})\r\n        setTaskName('')\r\n        setDate(initialDate)\r\n        setAdditionalInfo('')\r\n        setPriority(false)\r\n      }\r\n\r\n    return (\r\n        <>\r\n        <h3>{language === 'polish' ? messages.addTaskLabelPl : messages.addTaskLabelEn}</h3>\r\n        <form className='addTaskForm' onSubmit={handleAddTask}>\r\n            <label>{language === 'polish' ? messages.taskNameLabelPl : messages.taskNameLabelEn}</label>\r\n            <input\r\n                className='taskName-inForm'\r\n                type='text'\r\n                value={taskName}\r\n                ref ={nameInputRef}\r\n                onChange={(e) => {\r\n                    setTaskName(e.target.value)\r\n            }}/>\r\n            <label>{language === 'polish' ? messages.additionalInfoLabelPl : messages.additionalInfoLabelEn}</label>\r\n            <input\r\n            className='additionalTaskInfo-inForm'\r\n            type='text'\r\n            value={additionalInfo}\r\n            onChange={(e)=>{setAdditionalInfo(e.target.value)\r\n            }}/>\r\n            <label>{language === 'polish' ? messages.taskDateLabelPl : messages.taskDateLabelEn}</label>\r\n            <input\r\n                className='taskDate-inForm'\r\n                type='date'\r\n                value={date}\r\n                onChange={(e) => {\r\n                    setDate(e.target.value)\r\n            }}/>\r\n            <div>\r\n                <input\r\n                    className='priorityTask-inForm'\r\n                    type='checkbox'\r\n                    value={priority}\r\n                    checked={priority}\r\n                    onChange={() => setPriority(prev => !prev)}\r\n                />\r\n                <label>{language === 'polish' ? messages.taskPriorityLabelPl : messages.taskPriorityLabelEn}</label>\r\n            </div>\r\n            <button\r\n            className='addTaskButton-inForm'\r\n            onClick={handleAddTask}>\r\n                {language === 'polish' ? messages.addTaskBtnLabelPl : messages.addTaskBtnLabelEn}\r\n            </button>\r\n        </form>\r\n        </>\r\n     );\r\n}\r\n\r\nexport default AddTask;","import React from 'react';\r\nimport { TasksContext, DispatchContext, LanguageContext } from './App'\r\n\r\nconst RecentlyDone = () => {\r\n\r\n    const tasks = React.useContext(TasksContext)\r\n    const dispatch = React.useContext(DispatchContext)\r\n    const language = React.useContext(LanguageContext)\r\n\r\n    const messages = {\r\n        taskCompleteTitlePl: 'Wykonano',\r\n        taskCompleteTitleEn: 'Done',\r\n        taskDeleteTitlePl: 'Usuń zadanie',\r\n        taskDeleteTitleEn: 'Delete task',\r\n        taskDoneTimePl: 'Wykonano:',\r\n        taskDoneTimeEn: 'Done:',\r\n        recentlyDoneTitlePl: 'Ostatnio wykonane:',\r\n        recentlyDoneTitleEn: 'Recently Done:',\r\n    }\r\n\r\n    const handleDelete = (id) => {\r\n        dispatch({type: 'delete-task', payload: id})\r\n    }\r\n\r\n    const doneList = tasks.map(task => {\r\n    return task.complete ? (<div className='singleTaskBox-inDone' key={task.id}>\r\n            <p className='taskName-inDone'>{task.taskName}</p>\r\n            <p className='taskCompleteDate-inDone'><i className=\"fas fa-check-double\" title={language === 'polish' ? messages.taskCompleteTitlePl : messages.taskCompleteTitleEn}></i><i className='fas fa-times deleteDoneButton' title={language === 'polish' ? messages.taskDeleteTitlePl : messages.taskDeleteTitleEn} onClick={() => {handleDelete(task.id)}}></i>{language === 'polish' ? messages.taskDoneTimePl : messages.taskDoneTimeEn} {task.completeDate}</p>\r\n        </div>) : null\r\n    })\r\n\r\n    return (\r\n        <>\r\n        <h3>{language === 'polish' ? messages.recentlyDoneTitlePl : messages.recentlyDoneTitleEn}</h3>\r\n        {doneList}\r\n        </>\r\n     );\r\n}\r\n\r\nexport default RecentlyDone;","import React from 'react';\r\nimport { ChangeLanguageContext, LanguageContext, FocusContext } from './App.js'\r\n\r\nconst Header = () => {\r\n\r\n    const language = React.useContext(LanguageContext)\r\n    const changeLanguage = React.useContext(ChangeLanguageContext)\r\n    const focus = React.useContext(FocusContext)\r\n\r\n    return (\r\n        <div className=\"headerSection\">\r\n            <span className='language-switch'>\r\n               <label className=\"form-switch\">\r\n                    <input type=\"checkbox\" value={language} onChange={changeLanguage}/>\r\n                        <i></i>\r\n                </label>\r\n                English\r\n            </span>\r\n            <h2 className='pageTitle'>{language === 'polish' ? 'LISTA ZADAŃ' : 'TO DO LIST'}</h2>\r\n            <button className='focusButton' onClick={focus}>{language === 'polish' ? 'Dodaj zadanie' : 'Add task'}</button>\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { TasksContext, LanguageContext } from './App.js'\r\n\r\n\r\nconst Footer = () => {\r\n\r\n    const tasks = React.useContext(TasksContext)\r\n    const language = React.useContext(LanguageContext)\r\n\r\n    const countDone = tasks.filter(task => task.complete)\r\n\r\n    const polishInfo = <p>{tasks.length > 0 ? `${tasks.length - countDone.length} zadań czeka na wykonanie, a ${countDone.length} zostało wykonanych` : 'Obecnie lista jest pusta'}</p>\r\n\r\n    const englishInfo = <p>{tasks.length > 0 ? `${tasks.length - countDone.length} tasks left, ${countDone.length} has been done` : 'The list is currently empty'}</p>\r\n\r\n    return (\r\n        <>\r\n        { language === 'polish' ? polishInfo : englishInfo}\r\n        </>\r\n     );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\n\r\nconst Prompt = (props) => {\r\n\r\n\r\n    return (\r\n        <>\r\n            {props.handleConfirm ? (<i className='fas fa-check' onClick={props.handleConfirm}></i>) : null}<span>{props.message}</span>{props.handleDecline ? (<i className='fas fa-times' onClick={props.handleDecline}></i>) : null }\r\n        </>\r\n     );\r\n}\r\n\r\nexport default Prompt;","import TasksList from './TasksList.js'\nimport AddTask from './AddTask.js'\nimport RecentlyDone from './RecentlyDone.js'\nimport Header from './Header.js'\nimport Footer from './Footer.js'\nimport Prompt from './prompt.js'\n\nimport './App.css';\n\nimport React from 'react';\n\nexport const DispatchContext = React.createContext()\nexport const TasksContext = React.createContext()\nexport const LanguageContext = React.createContext()\nexport const ChangeLanguageContext = React.createContext()\nexport const RefContext = React.createContext()\nexport const FocusContext = React.createContext()\nexport const PromptContext = React.createContext()\n\nfunction App() {\n\n  // Tworzenie nowego zadania w tablicy\n\n  const newTask = (taskName, date, additionalInfo, priority) => {\n    return {\n        id: Date.now(),\n        taskName: taskName,\n        deadline: date,\n        additionalInfo: additionalInfo,\n        priority: priority,\n        complete: false\n    }\n  }\n\n  // zarządzanie stanem\n\n  const reducer = (tasks, action) => {\n    switch(action.type) {\n        case 'add-task':\n            return [...tasks, newTask(action.payload.name, action.payload.date, action.payload.additionalInfo, action.payload.priority)]\n        case 'change-status':\n            return tasks.map(task => {\n              if (task.id === action.payload) {\n                return {...task, complete: true, completeDate: new Date().toLocaleString()}\n              }\n              return task\n            })\n        case 'delete-task':\n          return tasks.filter(task => task.id !== action.payload)\n        default: showPrompt('oops! Coś poszło nie tak :(')\n    }\n  }\n\n  // delkaracja stanów\n\n  const [tasks, dispatch] = React.useReducer(reducer, [])\n  const [language, setLanguage] = React.useState('polish')\n\n  const initialPromptMessage = React.useMemo(() => { return {\n    text: '',\n    handleConfirm: '',\n    handleDecline: '',\n  }}, [])\n\n  const [promptText, setPromptText] = React.useState(initialPromptMessage)\n  const [isPromptActive, setIsPromptActive] = React.useState(false)\n\n\n  // obsługa prompt\n\n  const promptRef = React.useRef('')\n\n  const [promptIndex, setPromptIndex] = React.useState(0)\n\n  const showPrompt = React.useCallback((message, autoclose, removeFunction) => {\n    if (promptIndex) { clearTimeout(promptIndex) }\n    if(autoclose) {\n      promptRef.current.classList.add('active')\n      setIsPromptActive(true)\n      setPromptIndex(setTimeout(() => {\n        setIsPromptActive(false)\n        promptRef.current.classList.remove('active')\n        setPromptText(initialPromptMessage)\n      }, 3000))\n      return setPromptText({\n        text: message,\n        handleConfirm: '',\n        handleDecline: '',\n    })\n  }\n    if(!autoclose) {\n      promptRef.current.classList.add('active')\n      setIsPromptActive(true)\n      return setPromptText({\n        text: message,\n        handleConfirm: () => {\n          promptRef.current.classList.remove('active')\n          setIsPromptActive(false)\n          setPromptText(initialPromptMessage)\n          return removeFunction()\n        },\n        handleDecline: () => {\n          promptRef.current.classList.remove('active')\n          setIsPromptActive(false)\n          setPromptText(initialPromptMessage)\n        }\n        })\n    }\n  }, [promptIndex, initialPromptMessage])\n\n  // zmiana języka\n\n  const hadleChangeLanguage = React.useCallback(() => {\n    if (language === 'polish'){\n      setLanguage('english')\n      showPrompt('Language has been set to English', true)\n    }\n    else {\n      setLanguage('polish')\n      showPrompt('Zmieniono język na Polski', true)\n      }\n  }, [language, showPrompt])\n\n  // focus na dodawanie zadania\n\n  const nameInputRef = React.useRef()\n\n    const focus = () => {\n        nameInputRef.current.focus()\n    }\n\n\n  return (\n    <div className=\"App\">\n      <LanguageContext.Provider value={language}>\n        <TasksContext.Provider value={tasks}>\n          <DispatchContext.Provider value={dispatch}>\n            <RefContext.Provider value={nameInputRef}>\n              <FocusContext.Provider value={focus}>\n                <PromptContext.Provider value={showPrompt}>\n                  <header className=\"pageHeader\">\n                    <ChangeLanguageContext.Provider value={hadleChangeLanguage}>\n                      <Header />\n                    </ChangeLanguageContext.Provider>\n                  </header>\n                  <main className=\"mainSection\">\n                    <div ref={promptRef} className=\"prompt\">{isPromptActive ? <Prompt message={promptText.text} handleConfirm={promptText.handleConfirm} handleDecline={promptText.handleDecline} /> : null}</div>\n                    <section className=\"list\">\n                      <TasksList/>\n                    </section>\n                    <aside className=\"sidePanel\">\n                      <div className=\"addBox\">\n                        <AddTask/>\n                      </div>\n                      <div className=\"recentlyDone\">\n                        <RecentlyDone/>\n                      </div>\n                    </aside>\n                  </main>\n                  <footer className=\"pageFooter\">\n                    <Footer />\n                  </footer>\n                </PromptContext.Provider>\n              </FocusContext.Provider>\n            </RefContext.Provider>\n          </DispatchContext.Provider>\n        </TasksContext.Provider>\n      </LanguageContext.Provider>\n\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}